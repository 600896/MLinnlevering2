import kagglehub
sudalairajkumar_cryptocurrencypricehistory_path = kagglehub.dataset_download('sudalairajkumar/cryptocurrencypricehistory')

print('Data source import complete.')

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd

# Use the variable sudalairajkumar_cryptocurrencypricehistory_path to construct the file path

historical_data = pd.read_csv(os.path.join(sudalairajkumar_cryptocurrencypricehistory_path, 'coin_Bitcoin.csv'))
!pip install newspaper3k

 #Configure NLTK data path and download VADER lexicon
nltk.data.path.append("./")  # Append current directory to nltk data path
try:
    nltk.data.find("sentiment/vader_lexicon.zip")
except LookupError:
    nltk.download('vader_lexicon', download_dir='./')


from transformers import pipeline
from newspaper import Article
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def analyze_sentiment(text):
    sid = SentimentIntensityAnalyzer()
    scores = sid.polarity_scores(text)
    compound_score = scores['compound']

    # Determine sentiment based on compound score
    if compound_score >= 0.05:
        sentiment = 'Bullish'
    elif compound_score <= -0.05:
        sentiment = 'Bearish'
    else:
        sentiment = 'Neutral'

    return sentiment, scores

def map_to_market_sentiment(sentiment_label):
    if sentiment_label in ['POSITIVE', 'Bullish']:
        return 'Bullish'
    elif sentiment_label in ['NEGATIVE', 'Bearish']:
        return 'Bearish'
    else:
        return 'Neutral'

def get_article_text(url):
    article = Article(url)
    article.download()
    article.parse()
    return article.text

def predict_market_sentiment(url):
    article_text = get_article_text(url)
    sentiment, scores = analyze_sentiment(article_text)
    certainty_percentage = abs(scores['compound']) * 100  # Convert to percentage

    # Return values instead of print for Gradio
    return f"Predicted Market Sentiment: {sentiment}", f"Certainty of Prediction: {certainty_percentage:.2f}%", f"Sentiment Scores: {scores}"


article_url = 'https://www.coindesk.com/markets/2024/10/29/bitcoin-surges-above-71k-as-wild-crypto-market-pump-sees-175m-in-shorts-liquidated/'
predict_market_sentiment(article_url)

!pip install gradio

import gradio as gr
# Gradio function to handle URL input and call prediction function
def gradio_predict_sentiment(url):
    prediction, certainty, scores = predict_market_sentiment(url)
    return f"{prediction}\n{certainty}\n{scores}"

# Gradio Interface setup
demo = gr.Interface(
    fn=gradio_predict_sentiment, 
    inputs=gr.Textbox(label="Enter Article URL"),
    outputs="text",
    title="Market Sentiment Predictor"
)

# Launch the Gradio interface
demo.launch()
